package bin.androidlua;

import android.content.Context;
import android.content.res.AssetManager;

import bin.luajava.JavaFunction;
import bin.luajava.LuaException;
import bin.luajava.LuaState;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;

import static bin.androidlua.LuaRunner.readAll;

public class Import extends JavaFunction {
    private static String importStr = "local packages = {}\n" +
            "local append = table.insert\n" +
            "local new = luajava.new\n" +
            "\n" +
            "-- SciTE requires this, if you want to see stdout immediately...\n" +
            "\n" +
            "io.stdout:setvbuf 'no'\n" +
            "io.stderr:setvbuf 'no'\n" +
            "\n" +
            "local function new_tostring (o)\n" +
            "    return o:toString()\n" +
            "end\n" +
            "\n" +
            "function tryCatch(funs)\n" +
            "    local e\n" +
            "    if not xpcall(funs[1], function(err) e = err end) then\n" +
            "        if (type(e) == \"string\") then\n" +
            "            -- 跳过当前这个function的traceback\n" +
            "            funs[2](e .. '\\n' .. debug.tracebackSkip(1), false)\n" +
            "        else\n" +
            "            funs[2](e, true)\n" +
            "        end\n" +
            "        return false\n" +
            "    end\n" +
            "    return true\n" +
            "end\n" +
            "\n" +
            "function __java_class_call (t, ...)\n" +
            "    local stat, obj = pcall(new, t, ...)\n" +
            "    if not stat then\n" +
            "        error(\"cannot new instance of \" .. t.toString())\n" +
            "    end\n" +
            "    getmetatable(obj).__tostring = new_tostring\n" +
            "    return obj\n" +
            "end\n" +
            "\n" +
            "local function import_class (classname, packagename)\n" +
            "    local res, class = pcall(luajava.bindClass, packagename)\n" +
            "    if res then\n" +
            "        _G[classname] = class\n" +
            "        local mt = getmetatable(class)\n" +
            "        mt.__call = __java_class_call\n" +
            "        return class\n" +
            "    end\n" +
            "end\n" +
            "\n" +
            "local function massage_classname (classname)\n" +
            "    if classname:find('_') then\n" +
            "        classname = classname:gsub('_', '$')\n" +
            "    end\n" +
            "    return classname\n" +
            "end\n" +
            "\n" +
            "local globalMT = {\n" +
            "    __index = function(table, classname)\n" +
            "        classname = massage_classname(classname)\n" +
            "        for i, p in ipairs(packages) do\n" +
            "            local class = import_class(classname, p .. classname)\n" +
            "            if class then\n" +
            "                return class\n" +
            "            end\n" +
            "        end\n" +
            "        error(\"import cannot find \" .. classname)\n" +
            "    end\n" +
            "}\n" +
            "setmetatable(_G, globalMT)\n" +
            "\n" +
            "function import (package)\n" +
            "    local i = package:find('%.%*$')\n" +
            "    if i then\n" +
            "        -- a wildcard; put into the package list, including the final '.'\n" +
            "        append(packages, package:sub(1, i))\n" +
            "    else\n" +
            "        local classname = package:match('([%w_]+)$')\n" +
            "        if not import_class(classname, package) then\n" +
            "            error(\"cannot find \" .. package)\n" +
            "        end\n" +
            "    end\n" +
            "end\n" +
            "\n" +
            "append(packages, '')\n" +
            "\n" +
            "import 'java.lang.*'\n" +
            "import 'java.util.*'";
    /**
     * Constructor that receives a LuaState.
     *
     * @param L LuaState object associated with this JavaFunction object
     */
    public Import(LuaState L) {
        super(L);
    }

    @Override
    public int execute() throws LuaException {
        String name = "import";//L.toString(-1);
//        AssetManager am = context.getAssets();
        try {
//            InputStream is = am.open("lua/" + name + ".lua");
            byte[] bytes = importStr.getBytes();//readAll(is);
            L.LloadBuffer(bytes, name);
            return 1;
        } catch (Exception e) {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            e.printStackTrace(new PrintStream(os));
            L.pushString("Cannot load module "+name+":\n"+os.toString());
            return 1;
        }
    }
}
