package org.exploit.depth.internal;

import java.io.File;
import java.lang.reflect.Field;

public class IPCMain {

    public static void main(String[] args) {
        //
        File file = new File(args[0].replace("base.apk","")+"lib/");
        String nativeDir = file.listFiles()[0].getAbsolutePath()+"/";
        try {
            Class pClz = ProcessHostConfig.class;
            Field field = pClz.getDeclaredField("nativeLibraryDir");
            field.setAccessible(true);
            field.set(null,nativeDir);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        //
        String[] newArgs = new String[args.length - 2];
        newArgs[0] = args[0];
        for (int i = 3; i < args.length; i++) {
            newArgs[i-2] = args[i];
        }
        try {
            Class<IRootRemote> mainClz = (Class<IRootRemote>) Class.forName(args[1]);
            IRootRemote mainObj = mainClz.newInstance();
            mainObj.onCreate(newArgs);
            new RootIPC(args[2], mainObj.onBind(), 0, 30 * 1000, true);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (RootIPC.TimeoutException e) {
            e.printStackTrace();
        }
    }
}
