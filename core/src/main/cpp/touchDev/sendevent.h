#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <math.h>
#include <thread>
#include <iostream>
#include <dirent.h>
#include <sys/file.h>
#include <linux/input.h>
#include <linux/uinput.h>
#include <sys/uio.h>

class TouchDev
{
  public:
	const int NO_UP = 0;
	const int UP = 1;

	int Touch_Init(int FingerNum);
	void Touch_Down(int x, int y);
	void Touch_Up();
	void Touch_Move(int x, int y);
	void Touch_Alloc();
	void SetTouchEventNum(int num);
	void SetTouchFingerNum(int num);
  private:
	int TouchDeviceHandle;
	FILE *DevFile;
	int Finger;
	int EventNum = -1;
	//const struct input_event nullEvent[5] = { 0 };
	void *wr;

	int getTouchEventNum();
	void SendNullData();
	void SendEventData(void *v, int count);
};

int GetEventCount()
{
	DIR *dir = opendir("/dev/input/");
	dirent *ptr = NULL;
	int count = 0;
	while ((ptr = readdir(dir)) != NULL)
	{
		if (strstr(ptr->d_name, "event"))
			count++;
	}
	// printf("count:%d\n",count);
	return count;
}

int GetEventId_2()
{
	int EventCount = GetEventCount();
	int *fdArray = (int *)malloc(EventCount * 4 + 4);
	int result;

	for (int i = 0; i < EventCount; i++)
	{
		char temp[128];
		sprintf(temp, "/dev/input/event%d", i);
		fdArray[i] = open(temp, O_RDWR | O_NONBLOCK);
	}

	int k = 0;
	input_event ev;
	while (1)
	{
		for (int i = 0; i < EventCount; i++)
		{
			memset(&ev, 0, sizeof(ev));
			read(fdArray[i], &ev, sizeof(ev));
			if (ev.type == EV_ABS)
			{
				printf("id:%d\n", i);
				free(fdArray);
				return i;
			}
		}
		usleep(100);
	}
}

int TouchDev::Touch_Init(int FingerNum)
{
	if (this->EventNum <= 0)
	{
		this->EventNum = this->getTouchEventNum();
		if (this->EventNum < 0)
			return -1;
	}
	char tmp[256];
	sprintf(tmp, "/dev/input/event%d", this->EventNum);
	this->TouchDeviceHandle = open(tmp, O_RDWR);
	if (this->TouchDeviceHandle < 0)
		return -1;
	this->Finger = FingerNum;
	struct input_absinfo absX, absY;
	ioctl(this->TouchDeviceHandle, EVIOCGABS(ABS_MT_POSITION_X), &absX);
	ioctl(this->TouchDeviceHandle, EVIOCGABS(ABS_MT_POSITION_Y), &absY);
	return 0;
}

int TouchDev::getTouchEventNum()
{
	return GetEventId_2();
}

void TouchDev::SendNullData()
{
	static struct input_event event[2];
	memset(event, 0, sizeof(struct input_event) * 2);
	
	int32_t tmpCnt = 0;
	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;
	
	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_SLOT;
	event[tmpCnt].value = Finger;
	tmpCnt++;

	this->SendEventData(event, tmpCnt);
}

void TouchDev::SendEventData(void *v, int count)
{
	write(this->TouchDeviceHandle, v, sizeof(struct input_event) * count);
}

void TouchDev::SetTouchEventNum(int num)
{
	this->EventNum = num;
}

void TouchDev::SetTouchFingerNum(int num)
{
	this->Finger = num;
}

void TouchDev::Touch_Down(int x, int y)
{
	static struct input_event event[9];
	memset(event, 0, sizeof(struct input_event) * 9);
	this->SendNullData();

	int32_t tmpCnt = 0;
	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_SLOT;
	event[tmpCnt].value = Finger;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_TRACKING_ID;
	event[tmpCnt].value = 123;
	tmpCnt++;

	event[tmpCnt].type = EV_KEY;
	event[tmpCnt].code = BTN_TOUCH;
	event[tmpCnt].value = KEY_DOWN;
	tmpCnt++;

	event[tmpCnt].type = EV_KEY;
	event[tmpCnt].code = BTN_TOOL_FINGER;
	event[tmpCnt].value = KEY_DOWN;
	tmpCnt++;
	
	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_POSITION_X;
	event[tmpCnt].value = x;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_POSITION_Y;
	event[tmpCnt].value = y;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_TOUCH_MAJOR;
	event[tmpCnt].value = 4;
	tmpCnt++;

	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	this->SendEventData(event, tmpCnt);
}

void TouchDev::Touch_Alloc()
{
	static struct input_event event[5];
	memset(event, 0, sizeof(struct input_event) * 5);
	this->SendNullData();

	int32_t tmpCnt = 0;
	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_SLOT;
	event[tmpCnt].value = Finger;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_TRACKING_ID;
	event[tmpCnt].value = 123;
	tmpCnt++;

	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	this->SendEventData(event, tmpCnt);
}

void TouchDev::Touch_Move(int x, int y)
{
	static struct input_event event[8];
	memset(event, 0, sizeof(struct input_event) * 8);
	this->SendNullData();

	int32_t tmpCnt = 0;
	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_SLOT;
	event[tmpCnt].value = Finger;
	tmpCnt++;

	event[tmpCnt].type = EV_KEY;
	event[tmpCnt].code = BTN_TOUCH;
	event[tmpCnt].value = KEY_DOWN;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_POSITION_X;
	event[tmpCnt].value = x;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_POSITION_Y;
	event[tmpCnt].value = y;
	tmpCnt++;
	
	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_TOUCH_MAJOR;
	event[tmpCnt].value = 4;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_WIDTH_MAJOR;
	event[tmpCnt].value = 10;
	tmpCnt++;

	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	this->SendEventData(event, tmpCnt);
}

void TouchDev::Touch_Up()
{
	static struct input_event event[7];
	memset(event, 0, sizeof(struct input_event) * 6);
	this->SendNullData();

	int32_t tmpCnt = 0;
	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_SLOT;
	event[tmpCnt].value = Finger;
	tmpCnt++;

	event[tmpCnt].type = EV_ABS;
	event[tmpCnt].code = ABS_MT_TRACKING_ID;
	event[tmpCnt].value = -1;
	tmpCnt++;
	
	event[tmpCnt].type = EV_KEY;
	event[tmpCnt].code = BTN_TOUCH;
	event[tmpCnt].value = KEY_UP;
	tmpCnt++;

	event[tmpCnt].type = EV_KEY;
	event[tmpCnt].code = BTN_TOOL_FINGER;
	event[tmpCnt].value = KEY_UP;
	tmpCnt++;

	event[tmpCnt].type = EV_SYN;
	event[tmpCnt].code = SYN_REPORT;
	event[tmpCnt].value = 0;
	tmpCnt++;

	this->SendEventData(event, tmpCnt);
}