package org.exploit.depth.activity;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.Application;
import android.app.Dialog;
import android.app.DirectAction;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.LoaderManager;
import android.app.PendingIntent;
import android.app.PictureInPictureParams;
import android.app.SharedElementCallback;
import android.app.TaskStackBuilder;
import android.app.VoiceInteractor;
import android.app.assist.AssistContent;
import android.content.BroadcastReceiver;
import android.content.ComponentCallbacks;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentSender;
import android.content.LocusId;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.DatabaseErrorHandler;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.CancellationSignal;
import android.os.Handler;
import android.os.Looper;
import android.os.PersistableBundle;
import android.os.UserHandle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.transition.Scene;
import android.transition.TransitionManager;
import android.util.AttributeSet;
import android.view.ActionMode;
import android.view.ContextMenu;
import android.view.Display;
import android.view.DragAndDropPermissions;
import android.view.DragEvent;
import android.view.KeyEvent;
import android.view.KeyboardShortcutGroup;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.SearchEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.widget.Toolbar;


import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.function.Consumer;

public abstract class DepthActivity extends Activity {

    public Activity that;

    public void attch(Activity activity) {
        that = activity;
    }

    @Override
    public void attachBaseContext(Context newBase) {

    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        that.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
        that.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        setLightStatusBar(true);
    }

    public void setLightStatusBar(boolean dark) {
        View decor = that.getWindow().getDecorView();
        if (dark) {
            decor.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
        } else {
            decor.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
        }
    }

    public void startActivity(Class clazz) {
        startActivity(clazz.getName());
    }

    public void startActivity(String cls) {
        Intent intent = new Intent(that, ProxyActivity.class);
        intent.putExtra("class", cls);
        that.startActivity(intent);
    }

    @Override
    public void startActivity(Intent intent) {
        Intent i = new Intent(this, ProxyActivity.class);
        Bundle bundle = intent.getExtras();
        if (bundle != null) {
            i.putExtras(bundle);
        }
        i.putExtra("class", intent.getComponent().getClassName());
        that.startActivity(i);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return super.onKeyDown(keyCode,event);
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onRestart() {

    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onResume() {

    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onStop() {

    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onStart() {

    }

    @Override
    public void setContentView(View view) {
        that.setContentView(view);
    }

    @Override
    public void setContentView(int layoutResID) {
        that.setContentView(layoutResID);
    }

    @Override
    public void setIntent(Intent newIntent) {
        that.setIntent(newIntent);
    }

    @Override
    public void setTheme(int resid) {
        that.setTheme(resid);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void setTheme(@Nullable Resources.Theme theme) {
        that.setTheme(theme);
    }

    @Override
    public void setActionBar(@Nullable Toolbar toolbar) {
        that.setActionBar(toolbar);
    }

    @Override
    public void setVisible(boolean visible) {
        that.setVisible(visible);
    }

    @Override
    public Resources.Theme getTheme() {
        return that.getTheme();
    }

    @Override
    public Resources getResources() {
        return that.getResources();
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public String getOpPackageName() {
        return that.getOpPackageName();
    }

    @Override
    public String getPackageName() {
        return that.getPackageName();
    }

    @Override
    public AssetManager getAssets() {
        return that.getAssets();
    }

    @Override
    public ApplicationInfo getApplicationInfo() {
        return that.getApplicationInfo();
    }

    @Nullable
    @Override
    public ActionBar getActionBar() {
        return that.getActionBar();
    }

    @Override
    public ClassLoader getClassLoader() {
        return that.getClassLoader();
    }

    @Nullable
    @Override
    public ComponentName getCallingActivity() {
        return that.getCallingActivity();
    }

    @Override
    public ComponentName getComponentName() {
        return that.getComponentName();
    }

    @Override
    public ContentResolver getContentResolver() {
        return that.getContentResolver();
    }

    @Override
    public Context getApplicationContext() {
        return that.getApplicationContext();
    }

    @Override
    public Context getBaseContext() {
        return that.getBaseContext();
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Nullable
    @Override
    public Display getDisplay() {
        return that.getDisplay();
    }

    @RequiresApi(api = Build.VERSION_CODES.P)
    @Override
    public Executor getMainExecutor() {
        return that.getMainExecutor();
    }

    @Override
    public File getCacheDir() {
        return that.getCacheDir();
    }

    @Override
    public File getCodeCacheDir() {
        return that.getCodeCacheDir();
    }

    @Override
    public File getDatabasePath(String name) {
        return that.getDatabasePath(name);
    }

    @Override
    public File getDataDir() {
        return that.getDataDir();
    }

    @Override
    public File getDir(String name, int mode) {
        return that.getDir(name, mode);
    }

    @Override
    public File getExternalCacheDir() {
        return that.getExternalCacheDir();
    }

    @Override
    public File getExternalFilesDir(String type) {
        return that.getExternalFilesDir(type);
    }

    @Override
    public File getFilesDir() {
        return that.getFilesDir();
    }

    @Override
    public File getFileStreamPath(String name) {
        return that.getFileStreamPath(name);
    }

    @Override
    public File getNoBackupFilesDir() {
        return that.getNoBackupFilesDir();
    }

    @Override
    public File getObbDir() {
        return that.getObbDir();
    }

    @Override
    public File[] getExternalCacheDirs() {
        return that.getExternalCacheDirs();
    }

    @Override
    public File[] getExternalFilesDirs(String type) {
        return that.getExternalFilesDirs(type);
    }

    @Override
    public File[] getExternalMediaDirs() {
        return that.getExternalMediaDirs();
    }

    @Override
    public File[] getObbDirs() {
        return that.getObbDirs();
    }

    @Override
    public int getChangingConfigurations() {
        return that.getChangingConfigurations();
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public int getMaxNumPictureInPictureActions() {
        return that.getMaxNumPictureInPictureActions();
    }

    @Override
    public int getRequestedOrientation() {
        return that.getRequestedOrientation();
    }

    @Override
    public int getTaskId() {
        return that.getTaskId();
    }

    @Override
    public Intent getIntent() {
        return that.getIntent();
    }

    @Nullable
    @Override
    public Intent getParentActivityIntent() {
        return that.getParentActivityIntent();
    }

    @NonNull
    @Override
    public LayoutInflater getLayoutInflater() {
        return that.getLayoutInflater();
    }

    @Override
    public Looper getMainLooper() {
        return that.getMainLooper();
    }

    @NonNull
    @Override
    public MenuInflater getMenuInflater() {
        return that.getMenuInflater();
    }

    @Nullable
    @Override
    public Object getLastNonConfigurationInstance() {
        return that.getLastNonConfigurationInstance();
    }

    @Override
    public Object getSystemService(@NonNull String name) {
        return that.getSystemService(name);
    }

    @Override
    public PackageManager getPackageManager() {
        return that.getPackageManager();
    }

    @Override
    public Scene getContentScene() {
        return that.getContentScene();
    }

    @Override
    public SharedPreferences getPreferences(int mode) {
        return that.getPreferences(mode);
    }

    @Override
    public SharedPreferences getSharedPreferences(String name, int mode) {
        return that.getSharedPreferences(name, mode);
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Nullable
    @Override
    public String getAttributionTag() {
        return that.getAttributionTag();
    }

    @Nullable
    @Override
    public String getCallingPackage() {
        return that.getCallingPackage();
    }

    @NonNull
    @Override
    public String getLocalClassName() {
        return that.getLocalClassName();
    }

    @Override
    public String getPackageCodePath() {
        return that.getPackageCodePath();
    }

    @Override
    public String getPackageResourcePath() {
        return that.getPackageResourcePath();
    }

    @Override
    public String getSystemServiceName(Class<?> serviceClass) {
        return that.getSystemServiceName(serviceClass);
    }

    @Override
    public TransitionManager getContentTransitionManager() {
        return that.getContentTransitionManager();
    }

    @Nullable
    @Override
    public Uri getReferrer() {
        return that.getReferrer();
    }

    @Nullable
    @Override
    public View getCurrentFocus() {
        return that.getCurrentFocus();
    }

    @Override
    public VoiceInteractor getVoiceInteractor() {
        return that.getVoiceInteractor();
    }

    @Override
    public Window getWindow() {
        return that.getWindow();
    }

    @Override
    public WindowManager getWindowManager() {
        return that.getWindowManager();
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void onGetDirectActions(@NonNull CancellationSignal cancellationSignal, @NonNull Consumer<List<DirectAction>> callback) {
        that.onGetDirectActions(cancellationSignal, callback);
    }

    @Override
    public FragmentManager getFragmentManager() {
        return that.getFragmentManager();
    }

    @Override
    public LoaderManager getLoaderManager() {
        return that.getLoaderManager();
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public boolean setTranslucent(boolean translucent) {
        return that.setTranslucent(translucent);
    }

    @Override
    public void setContentTransitionManager(TransitionManager tm) {
        that.setContentTransitionManager(tm);
    }

    @Override
    public void setContentView(View view, ViewGroup.LayoutParams params) {
        that.setContentView(view, params);
    }

    @Override
    public void setEnterSharedElementCallback(SharedElementCallback callback) {
        that.setEnterSharedElementCallback(callback);
    }

    @Override
    public void setExitSharedElementCallback(SharedElementCallback callback) {
        that.setExitSharedElementCallback(callback);
    }

    @Override
    public void setFinishOnTouchOutside(boolean finish) {
        that.setFinishOnTouchOutside(finish);
    }

    @Override
    public void setImmersive(boolean i) {
        that.setImmersive(i);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void setInheritShowWhenLocked(boolean inheritShowWhenLocked) {
        that.setInheritShowWhenLocked(inheritShowWhenLocked);
    }

    @Override
    public int getWallpaperDesiredMinimumHeight() {
        return that.getWallpaperDesiredMinimumHeight();
    }

    @Override
    public Drawable getWallpaper() {
        return that.getWallpaper();
    }

    @Override
    public int getWallpaperDesiredMinimumWidth() {
        return that.getWallpaperDesiredMinimumWidth();
    }

    @Override
    public void sendBroadcast(Intent intent) {
        that.sendBroadcast(intent);
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public void setLocusContext(@Nullable LocusId locusId, @Nullable Bundle bundle) {
        that.setLocusContext(locusId, bundle);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public void setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        that.setPictureInPictureParams(params);
    }

    @Override
    public void setRequestedOrientation(int requestedOrientation) {
        that.setRequestedOrientation(requestedOrientation);
    }

    @RequiresApi(api = Build.VERSION_CODES.O_MR1)
    @Override
    public void setShowWhenLocked(boolean showWhenLocked) {
        that.setShowWhenLocked(showWhenLocked);
    }

    @Override
    public void setTaskDescription(ActivityManager.TaskDescription taskDescription) {
        that.setTaskDescription(taskDescription);
    }

    @Override
    public void setTitle(int titleId) {
        that.setTitle(titleId);
    }

    @Override
    public void setTitle(CharSequence title) {
        that.setTitle(title);
    }

    @RequiresApi(api = Build.VERSION_CODES.O_MR1)
    @Override
    public void setTurnScreenOn(boolean turnScreenOn) {
        that.setTurnScreenOn(turnScreenOn);
    }

    @Override
    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent) throws PackageManager.NameNotFoundException {
        that.setVrModeEnabled(enabled, requestedComponent);
    }

    @Override
    public void startPostponedEnterTransition() {
        that.startPostponedEnterTransition();
    }

    @Override
    public void setTitleColor(int textColor) {
        that.setTitleColor(textColor);
    }

    @Override
    public void setWallpaper(Bitmap bitmap) throws IOException {
        that.setWallpaper(bitmap);
    }

    @Override
    public void setWallpaper(InputStream data) throws IOException {
        that.setWallpaper(data);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn) {
        return that.bindIsolatedService(service, flags, instanceName, executor, conn);
    }

    @Override
    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        return that.bindService(service, conn, flags);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn) {
        return that.bindService(service, flags, executor, conn);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        that.sendBroadcastAsUser(intent, user);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void registerActivityLifecycleCallbacks(@NonNull Application.ActivityLifecycleCallbacks callback) {
        that.registerActivityLifecycleCallbacks(callback);
    }

    @SuppressLint("MissingPermission")
    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user) {
        return that.bindServiceAsUser(service, conn, flags, user);
    }

    @Override
    public boolean stopService(Intent name) {
        return that.stopService(name);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public ComponentName startForegroundService(Intent service) {
        return that.startForegroundService(service);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendStickyBroadcast(Intent intent) {
        that.sendStickyBroadcast(intent);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        that.sendStickyBroadcastAsUser(intent, user);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void unregisterActivityLifecycleCallbacks(@NonNull Application.ActivityLifecycleCallbacks callback) {
        that.unregisterActivityLifecycleCallbacks(callback);
    }

    @Override
    public ComponentName startService(Intent service) {
        return that.startService(service);
    }

    @Override
    public void unbindService(ServiceConnection conn) {
        that.unbindService(conn);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void updateServiceGroup(ServiceConnection conn, int group, int importance) {
        that.updateServiceGroup(conn, group, importance);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        that.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData, initialExtras);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        that.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        that.sendBroadcastAsUser(intent, user, receiverPermission);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        that.sendOrderedBroadcastAsUser(intent, user, receiverPermission, resultReceiver, scheduler, initialCode, initialData, initialExtras);
    }

    @Override
    public void onUserLeaveHint() {

    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public boolean onPictureInPictureRequested() {
        return that.onPictureInPictureRequested();
    }

    @Override
    public boolean onSearchRequested() {
        return that.onSearchRequested();
    }

    @Override
    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        return that.onSearchRequested(searchEvent);
    }

    @Override
    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return that.registerReceiver(receiver, filter);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return that.registerReceiver(receiver, filter, flags);
    }

    @Override
    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) {
        return that.registerReceiver(receiver, filter, broadcastPermission, scheduler);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags) {
        return that.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);
    }

    @Override
    public void onUserInteraction() {
        that.onUserInteraction();
    }

    @Override
    public void registerComponentCallbacks(ComponentCallbacks callback) {
        that.registerComponentCallbacks(callback);
    }

    @Override
    public void registerForContextMenu(View view) {
        that.registerForContextMenu(view);
    }

    @Override
    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        that.unregisterComponentCallbacks(callback);
    }

    @Override
    public void unregisterForContextMenu(View view) {
        that.unregisterForContextMenu(view);
    }

    @Override
    public void unregisterReceiver(BroadcastReceiver receiver) {
        that.unregisterReceiver(receiver);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        that.removeStickyBroadcastAsUser(intent, user);
    }

    @Override
    public void addContentView(View view, ViewGroup.LayoutParams params) {
        that.addContentView(view, params);
    }

    @Override
    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        return that.requestDragAndDropPermissions(event);
    }

    @Override
    public boolean releaseInstance() {
        return that.releaseInstance();
    }

    @Override
    public void recreate() {
        that.recreate();
    }

    @Override
    public void reportFullyDrawn() {
        that.reportFullyDrawn();
    }

    @Override
    public void revokeUriPermission(Uri uri, int modeFlags) {
        that.revokeUriPermission(uri, modeFlags);
    }

    @Nullable
    @Override
    public View onCreatePanelView(int featureId) {
        return that.onCreatePanelView(featureId);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        that.revokeUriPermission(targetPackage, uri, modeFlags);
    }

    @Override
    public void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onPostResume() {
    }

    @Override
    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        return that.onKeyLongPress(keyCode, event);
    }

    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        return that.onGenericMotionEvent(event);
    }

    @Override
    public boolean onCreatePanelMenu(int featureId, @NonNull Menu menu) {
        return that.onCreatePanelMenu(featureId, menu);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return that.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onContextItemSelected(@NonNull MenuItem item) {
        return that.onContextItemSelected(item);
    }

    @Nullable
    @Override
    public ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type) {
        return that.onWindowStartingActionMode(callback, type);
    }

    @Nullable
    @Override
    public ActionMode onWindowStartingActionMode(ActionMode.Callback callback) {
        return that.onWindowStartingActionMode(callback);
    }

    @Override
    public void onTitleChanged(CharSequence title, int color) {
    }

    @Override
    public void onSaveInstanceState(@NonNull Bundle outState) {
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onPostCreate(@Nullable Bundle savedInstanceState) {

    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onPause() {
    }

    @Override
    public void onNewIntent(Intent intent) {

    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onDestroy() {

    }

    @Override
    public void onChildTitleChanged(Activity childActivity, CharSequence title) {

    }

    @Override
    public boolean onMenuItemSelected(int featureId, @NonNull MenuItem item) {
        return that.onMenuItemSelected(featureId, item);
    }

    @Override
    public void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) {

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {

    }

    @Override
    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return that.onKeyMultiple(keyCode, repeatCount, event);
    }

    @Override
    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        return that.onKeyShortcut(keyCode, event);
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        return that.onKeyUp(keyCode, event);
    }

    @Override
    public boolean onMenuOpened(int featureId, @NonNull Menu menu) {
        return that.onMenuOpened(featureId, menu);
    }

    @Override
    public boolean onNavigateUp() {
        return that.onNavigateUp();
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        return that.onOptionsItemSelected(item);
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        return that.onPrepareOptionsMenu(menu);
    }

    @Override
    public boolean onPreparePanel(int featureId, @Nullable View view, @NonNull Menu menu) {
        return that.onPreparePanel(featureId, view, menu);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return that.onTouchEvent(event);
    }

    @Override
    public boolean onTrackballEvent(MotionEvent event) {
        return that.onTrackballEvent(event);
    }

    @Nullable
    @Override
    public CharSequence onCreateDescription() {
        return that.onCreateDescription();
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        that.onCreate(savedInstanceState, persistentState);
    }

    @Override
    public void onRestoreInstanceState(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        that.onRestoreInstanceState(savedInstanceState, persistentState);
    }

    @Override
    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        that.onPostCreate(savedInstanceState, persistentState);
    }

    @Override
    public void onStateNotSaved() {
        that.onStateNotSaved();
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void onTopResumedActivityChanged(boolean isTopResumedActivity) {
        that.onTopResumedActivityChanged(isTopResumedActivity);
    }

    @Override
    public boolean isVoiceInteraction() {
        return that.isVoiceInteraction();
    }

    @Override
    public boolean isVoiceInteractionRoot() {
        return that.isVoiceInteractionRoot();
    }

    @Override
    public boolean isLocalVoiceInteractionSupported() {
        return that.isLocalVoiceInteractionSupported();
    }

    @Override
    public void startLocalVoiceInteraction(Bundle privateOptions) {
        that.startLocalVoiceInteraction(privateOptions);
    }

    @Override
    public void onLocalVoiceInteractionStarted() {
        that.onLocalVoiceInteractionStarted();
    }

    @Override
    public void onLocalVoiceInteractionStopped() {
        that.onLocalVoiceInteractionStopped();
    }

    @Override
    public void stopLocalVoiceInteraction() {
        that.stopLocalVoiceInteraction();
    }

    @Override
    public void onSaveInstanceState(@NonNull Bundle outState, @NonNull PersistableBundle outPersistentState) {
        that.onSaveInstanceState(outState, outPersistentState);
    }

    @Override
    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return that.onCreateThumbnail(outBitmap, canvas);
    }

    @Override
    public void onProvideAssistData(Bundle data) {
        that.onProvideAssistData(data);
    }

    @Override
    public void onProvideAssistContent(AssistContent outContent) {
        that.onProvideAssistContent(outContent);
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public void onPerformDirectAction(@NonNull String actionId, @NonNull Bundle arguments, @NonNull CancellationSignal cancellationSignal, @NonNull Consumer<Bundle> resultListener) {
        that.onPerformDirectAction(actionId, arguments, cancellationSignal, resultListener);
    }

    @Override
    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        that.onProvideKeyboardShortcuts(data, menu, deviceId);
    }

    @Override
    public boolean showAssist(Bundle args) {
        return that.showAssist(args);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        that.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }

    @Override
    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        that.onMultiWindowModeChanged(isInMultiWindowMode);
    }

    @Override
    public boolean isInMultiWindowMode() {
        return that.isInMultiWindowMode();
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        that.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }

    @Override
    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        that.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }

    @Override
    public boolean isInPictureInPictureMode() {
        return that.isInPictureInPictureMode();
    }

    @Override
    public void enterPictureInPictureMode() {
        that.enterPictureInPictureMode();
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return that.enterPictureInPictureMode(params);
    }

    @Override
    public void onConfigurationChanged(@NonNull Configuration newConfig) {
        that.onConfigurationChanged(newConfig);
    }

    @Override
    public Object onRetainNonConfigurationInstance() {
        return that.onRetainNonConfigurationInstance();
    }

    @Override
    public void onLowMemory() {
        that.onLowMemory();
    }

    @Override
    public void onTrimMemory(int level) {
        that.onTrimMemory(level);
    }

    @Override
    public void onAttachFragment(Fragment fragment) {
        that.onAttachFragment(fragment);
    }

    @Override
    public void startManagingCursor(Cursor c) {
        that.startManagingCursor(c);
    }

    @Override
    public void stopManagingCursor(Cursor c) {
        that.stopManagingCursor(c);
    }

    @Override
    public <T extends View> T findViewById(int id) {
        return that.findViewById(id);
    }

    @Override
    public void onBackPressed() {
        that.onBackPressed();
    }

    @Override
    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        that.onWindowAttributesChanged(params);
    }

    @Override
    public void onContentChanged() {
        that.onContentChanged();
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        that.onWindowFocusChanged(hasFocus);
    }

    @Override
    public void onAttachedToWindow() {
        that.onAttachedToWindow();
    }

    @Override
    public void onDetachedFromWindow() {
        that.onDetachedFromWindow();
    }

    @Override
    public boolean hasWindowFocus() {
        return that.hasWindowFocus();
    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent event) {
        return that.dispatchKeyEvent(event);
    }

    @Override
    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        return that.dispatchKeyShortcutEvent(event);
    }

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        return that.dispatchTouchEvent(ev);
    }

    @Override
    public boolean dispatchTrackballEvent(MotionEvent ev) {
        return that.dispatchTrackballEvent(ev);
    }

    @Override
    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        return that.dispatchGenericMotionEvent(ev);
    }

    @Override
    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return that.dispatchPopulateAccessibilityEvent(event);
    }

    @Override
    public void onPanelClosed(int featureId, @NonNull Menu menu) {
        that.onPanelClosed(featureId, menu);
    }

    @Override
    public void invalidateOptionsMenu() {
        that.invalidateOptionsMenu();
    }

    @Override
    public boolean onNavigateUpFromChild(Activity child) {
        return that.onNavigateUpFromChild(child);
    }

    @Override
    public void onCreateNavigateUpTaskStack(TaskStackBuilder builder) {
        that.onCreateNavigateUpTaskStack(builder);
    }

    @Override
    public void onPrepareNavigateUpTaskStack(TaskStackBuilder builder) {
        that.onPrepareNavigateUpTaskStack(builder);
    }

    @Override
    public void onOptionsMenuClosed(Menu menu) {
        that.onOptionsMenuClosed(menu);
    }

    @Override
    public void openOptionsMenu() {
        that.openOptionsMenu();
    }

    @Override
    public void closeOptionsMenu() {
        that.closeOptionsMenu();
    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        that.onCreateContextMenu(menu, v, menuInfo);
    }

    @Override
    public void openContextMenu(View view) {
        that.openContextMenu(view);
    }

    @Override
    public void closeContextMenu() {
        that.closeContextMenu();
    }

    @Override
    public void onContextMenuClosed(@NonNull Menu menu) {
        that.onContextMenuClosed(menu);
    }

    @Override
    public Dialog onCreateDialog(int id) {
        return null;
    }

    @Nullable
    @Override
    public Dialog onCreateDialog(int id, Bundle args) {
        return null;
    }

    @Override
    public void onPrepareDialog(int id, Dialog dialog) {

    }

    @Override
    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {

    }

    @Override
    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData, boolean globalSearch) {
        that.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);
    }

    @Override
    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        that.triggerSearch(query, appSearchData);
    }

    @Override
    public void takeKeyEvents(boolean get) {
        that.takeKeyEvents(get);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        that.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return that.shouldShowRequestPermissionRationale(permission);
    }

    @Override
    public void startActivityForResult(Intent intent, int requestCode) {
        that.startActivityForResult(intent, requestCode);
    }

    @Override
    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        that.startActivityForResult(intent, requestCode, options);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public boolean isActivityTransitionRunning() {
        return that.isActivityTransitionRunning();
    }

    @Override
    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException {
        that.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags);
    }

    @Override
    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException {
        that.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options);
    }

    @Override
    public void startActivity(Intent intent, @Nullable Bundle options) {
        that.startActivity(intent, options);
    }

    @Override
    public void startActivities(Intent[] intents) {
        that.startActivities(intents);
    }

    @Override
    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        that.startActivities(intents, options);
    }

    @Override
    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException {
        that.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags);
    }

    @Override
    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException {
        that.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options);
    }

    @Override
    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return that.startActivityIfNeeded(intent, requestCode);
    }

    @Override
    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return that.startActivityIfNeeded(intent, requestCode, options);
    }

    @Override
    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        return that.startNextMatchingActivity(intent);
    }

    @Override
    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return that.startNextMatchingActivity(intent, options);
    }

    @Override
    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        that.startActivityFromChild(child, intent, requestCode);
    }

    @Override
    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode, @Nullable Bundle options) {
        that.startActivityFromChild(child, intent, requestCode, options);
    }

    @Override
    public void startActivityFromFragment(@NonNull Fragment fragment, Intent intent, int requestCode) {
        that.startActivityFromFragment(fragment, intent, requestCode);
    }

    @Override
    public void startActivityFromFragment(@NonNull Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options) {
        that.startActivityFromFragment(fragment, intent, requestCode, options);
    }

    @Override
    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException {
        that.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags);
    }

    @Override
    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws IntentSender.SendIntentException {
        that.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options);
    }

    @Override
    public void overridePendingTransition(int enterAnim, int exitAnim) {
        that.overridePendingTransition(enterAnim, exitAnim);
    }

    @Override
    public Uri onProvideReferrer() {
        return that.onProvideReferrer();
    }

    @Override
    public boolean isFinishing() {
        return that.isFinishing();
    }

    @Override
    public boolean isDestroyed() {
        return that.isDestroyed();
    }

    @Override
    public boolean isChangingConfigurations() {
        return that.isChangingConfigurations();
    }

    @Override
    public void finish() {
        that.finish();
    }

    @Override
    public void finishAffinity() {
        that.finishAffinity();
    }

    @Override
    public void finishFromChild(Activity child) {
        that.finishFromChild(child);
    }

    @Override
    public void finishAfterTransition() {
        that.finishAfterTransition();
    }

    @Override
    public void finishActivity(int requestCode) {
        that.finishActivity(requestCode);
    }

    @Override
    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        that.finishActivityFromChild(child, requestCode);
    }

    @Override
    public void finishAndRemoveTask() {
        that.finishAndRemoveTask();
    }

    @Override
    public void onActivityReenter(int resultCode, Intent data) {
        that.onActivityReenter(resultCode, data);
    }

    @Override
    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return that.createPendingResult(requestCode, data, flags);
    }

    @Override
    public boolean isTaskRoot() {
        return that.isTaskRoot();
    }

    @Override
    public boolean moveTaskToBack(boolean nonRoot) {
        return that.moveTaskToBack(nonRoot);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull String name, @NonNull Context context, @NonNull AttributeSet attrs) {
        return that.onCreateView(name, context, attrs);
    }

    @Nullable
    @Override
    public View onCreateView(@Nullable View parent, @NonNull String name, @NonNull Context context, @NonNull AttributeSet attrs) {
        return that.onCreateView(parent, name, context, attrs);
    }

    @Override
    public void dump(@NonNull String prefix, @Nullable FileDescriptor fd, @NonNull PrintWriter writer, @Nullable String[] args) {
        that.dump(prefix, fd, writer, args);
    }

    @Override
    public boolean isImmersive() {
        return that.isImmersive();
    }

    @Override
    public boolean requestVisibleBehind(boolean visible) {
        return that.requestVisibleBehind(visible);
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onVisibleBehindCanceled() {
        that.onVisibleBehindCanceled();
    }

    @Override
    public void onEnterAnimationComplete() {
        that.onEnterAnimationComplete();
    }

    @Nullable
    @Override
    public ActionMode startActionMode(ActionMode.Callback callback) {
        return that.startActionMode(callback);
    }

    @Nullable
    @Override
    public ActionMode startActionMode(ActionMode.Callback callback, int type) {
        return that.startActionMode(callback, type);
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onActionModeStarted(ActionMode mode) {
        that.onActionModeStarted(mode);
    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onActionModeFinished(ActionMode mode) {
        that.onActionModeFinished(mode);
    }

    @Override
    public boolean shouldUpRecreateTask(Intent targetIntent) {
        return that.shouldUpRecreateTask(targetIntent);
    }

    @Override
    public boolean navigateUpTo(Intent upIntent) {
        return that.navigateUpTo(upIntent);
    }

    @Override
    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        return that.navigateUpToFromChild(child, upIntent);
    }

    @Override
    public void postponeEnterTransition() {
        that.postponeEnterTransition();
    }

    @Override
    public void startLockTask() {
        that.startLockTask();
    }

    @Override
    public void stopLockTask() {
        that.stopLockTask();
    }

    @Override
    public void showLockTaskEscapeMessage() {
        that.showLockTaskEscapeMessage();
    }

    @Override
    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        that.applyOverrideConfiguration(overrideConfiguration);
    }

    @Override
    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        return that.moveSharedPreferencesFrom(sourceContext, name);
    }

    @Override
    public boolean deleteSharedPreferences(String name) {
        return that.deleteSharedPreferences(name);
    }

    @Override
    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        return that.openFileInput(name);
    }

    @Override
    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        return that.openFileOutput(name, mode);
    }

    @Override
    public boolean deleteFile(String name) {
        return that.deleteFile(name);
    }

    @Override
    public String[] fileList() {
        return that.fileList();
    }

    @Override
    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) {
        return that.openOrCreateDatabase(name, mode, factory);
    }

    @Override
    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) {
        return that.openOrCreateDatabase(name, mode, factory, errorHandler);
    }

    @Override
    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        return that.moveDatabaseFrom(sourceContext, name);
    }

    @Override
    public boolean deleteDatabase(String name) {
        return that.deleteDatabase(name);
    }

    @Override
    public String[] databaseList() {
        return that.databaseList();
    }

    @Override
    public Drawable peekWallpaper() {
        return that.peekWallpaper();
    }

    @Override
    public void clearWallpaper() throws IOException {
        that.clearWallpaper();
    }

    @Override
    public void sendBroadcast(Intent intent, String receiverPermission) {
        that.sendBroadcast(intent, receiverPermission);
    }

    @Override
    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        that.sendOrderedBroadcast(intent, receiverPermission);
    }

    @Override
    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        that.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData, initialExtras);
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public void sendOrderedBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras) {
        that.sendOrderedBroadcast(intent, receiverPermission, receiverAppOp, resultReceiver, scheduler, initialCode, initialData, initialExtras);
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public void sendOrderedBroadcast(@NonNull Intent intent, int initialCode, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, @Nullable String initialData, @Nullable Bundle initialExtras, @Nullable Bundle options) {
        that.sendOrderedBroadcast(intent, initialCode, receiverPermission, receiverAppOp, resultReceiver, scheduler, initialData, initialExtras, options);
    }

    @SuppressLint("MissingPermission")
    @Override
    public void removeStickyBroadcast(Intent intent) {
        that.removeStickyBroadcast(intent);
    }

    @Override
    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return that.startInstrumentation(className, profileFile, arguments);
    }

    @Override
    public int checkPermission(String permission, int pid, int uid) {
        return that.checkPermission(permission, pid, uid);
    }

    @Override
    public int checkCallingPermission(String permission) {
        return that.checkCallingPermission(permission);
    }

    @Override
    public int checkCallingOrSelfPermission(String permission) {
        return that.checkCallingOrSelfPermission(permission);
    }

    @Override
    public int checkSelfPermission(String permission) {
        return that.checkSelfPermission(permission);
    }

    @Override
    public void enforcePermission(String permission, int pid, int uid, String message) {
        that.enforcePermission(permission, pid, uid, message);
    }

    @Override
    public void enforceCallingPermission(String permission, String message) {
        that.enforceCallingPermission(permission, message);
    }

    @Override
    public void enforceCallingOrSelfPermission(String permission, String message) {
        that.enforceCallingOrSelfPermission(permission, message);
    }

    @Override
    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        that.grantUriPermission(toPackage, uri, modeFlags);
    }

    @Override
    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return that.checkUriPermission(uri, pid, uid, modeFlags);
    }

    @Override
    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        return that.checkCallingUriPermission(uri, modeFlags);
    }

    @Override
    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return that.checkCallingOrSelfUriPermission(uri, modeFlags);
    }

    @Override
    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) {
        return that.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);
    }

    @Override
    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        that.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }

    @Override
    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        that.enforceCallingUriPermission(uri, modeFlags, message);
    }

    @Override
    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        that.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }

    @Override
    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) {
        that.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);
    }

    @Override
    public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException {
        return that.createPackageContext(packageName, flags);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public Context createContextForSplit(String splitName) throws PackageManager.NameNotFoundException {
        return that.createContextForSplit(splitName);
    }

    @Override
    public Context createConfigurationContext(Configuration overrideConfiguration) {
        return that.createConfigurationContext(overrideConfiguration);
    }

    @Override
    public Context createDisplayContext(Display display) {
        return that.createDisplayContext(display);
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @NonNull
    @Override
    public Context createWindowContext(int type, @Nullable Bundle options) {
        return that.createWindowContext(type, options);
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @NonNull
    @Override
    public Context createAttributionContext(@Nullable String attributionTag) {
        return that.createAttributionContext(attributionTag);
    }

    @Override
    public boolean isRestricted() {
        return that.isRestricted();
    }

    @Override
    public Context createDeviceProtectedStorageContext() {
        return that.createDeviceProtectedStorageContext();
    }

    @Override
    public boolean isDeviceProtectedStorage() {
        return that.isDeviceProtectedStorage();
    }

    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    public void sendBroadcastWithMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions) {
        that.sendBroadcastWithMultiplePermissions(intent, receiverPermissions);
    }
}
